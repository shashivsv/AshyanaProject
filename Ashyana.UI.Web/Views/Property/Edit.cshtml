@model Ashyana.UI.Web.Models.Property
<body data-title="create_user">
    <div class="modal fade" id="myModal" role="dialog">
        <div class="modal-dialog " style="width:780px;">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Property Details </h4>
                </div>
                <div class="modal-body">


                    @using (Html.BeginForm("Edit", "Property", FormMethod.Post, new { enctype = "multipart/form-data" }))
                    {
                    @Html.AntiForgeryToken()

                    <div class="form-horizontal">

                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        @Html.HiddenFor(model => model.propertyID)

                        <div class="form-group">
                            @Html.LabelFor(model => model.propertyDesc, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.propertyDesc, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.propertyDesc, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.purchaseType, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.purchaseType, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.purchaseType, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.propertyPrice, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.propertyPrice, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.propertyPrice, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.bedroom, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.bedroom, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.bedroom, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.propertyArea, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.propertyArea, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.propertyArea, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.countryID, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @if (ViewBag.countryDetails != null)
                                    {
                                    @Html.DropDownListFor(m => m.countryID, new SelectList(ViewBag.countryDetails, "Value", "Text"), "-Select", new { id = "countryID", @class = "form-control", @onchange = "GetState();" })
                                    }
                                    else
                                    {
                                    @Html.DropDownListFor(m => m.countryID, new SelectList(string.Empty, "Value", "Text"), "", new { @class = "form-control", id = "countryID" })
                                    }
                                @Html.ValidationMessageFor(model => model.countryID, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.stateID, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">


                                @Html.DropDownListFor(m => m.stateID, new SelectList(string.Empty, "Value", "Text"), "", new { @class = "form-control", id = "stateID", @onchange = "GetCity()" })

                                @Html.ValidationMessageFor(model => model.stateID, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.cityID, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.DropDownListFor(m => m.cityID, new SelectList(string.Empty, "Value", "Text"), "", new { @class = "form-control", id = "cityID" })


                                @Html.ValidationMessageFor(model => model.cityID, "", new { @class = "text-danger" })
                            </div>
                        </div>


                        <div class="form-group">
                            @Html.LabelFor(model => model.metro, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.metro, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.metro, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.propertyAddress, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.propertyAddress, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.propertyAddress, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.propertyLocality, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.propertyLocality, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.propertyLocality, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.pin, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.pin, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.pin, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.propertyAge, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.propertyAge, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.propertyAge, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.propertyTenure, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.propertyTenure, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.propertyTenure, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.propertyImage, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-sm-8">

                                @if (TempData["Image"] != null)
                                    { <img id="user_img" src=@TempData["Image"] style="width:100px;" alt="" />
                                    }
                                    else
                                    {  <img id="user_img" src="../images/uploads/upload.jpg" style="width:100px;" alt="" />
                                    }
                            </div>

                            <div class="col-md-10">

                                <input type="file" title="search image" id="img_file" name="file" onchange="show(this)" />
                                @Html.ValidationMessageFor(model => model.propertyImage, "", new { @class = "text-danger" })
                            </div>
                        </div>



                        <div class="form-group">
                            <div class="col-md-offset-2 col-md-10">
                                <input type="submit" value="Save" class="btn btn-default" />
                            </div>
                        </div>
                    </div>
                    }

                    <div class="modal-footer">
                        <div>
                            @Html.ActionLink("Back to List", "Index")
                        </div>

                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                    </div>
                </div>

            </div>
        </div>
    </div>
</body>
<script type="text/javascript">
      
        function show(input) {
            if (input.files && input.files[0]) {
                var filerdr = new FileReader();
                filerdr.onload = function (e) {
                    $('#user_img').attr('src', e.target.result);
                }
                filerdr.readAsDataURL(input.files[0]);
            }

        }

        function GetState() {
            var countryID = $('#countryID').val();

            $.ajax(
            {
                type: "POST",
                url: '@Url.Action("GetState","Property")',
                datatype: 'application/json',
                contentType: "application/json; charset=utf-8",
                data: '{countryID: "' + countryID + '"}',

                success: function (result) {
                    $("#stateID").html("");
                    $.each(result, function (i, state) {
                        $("#stateID").append('<option value="' + state.Value + '">' + state.Text + '</option>');
                    });
                }
            });
        }



        function GetCity() {
            var stateID = $('#stateID').val();

            $.ajax(
            {
                type: "POST",
                url: '@Url.Action("GetCity","Property")',
                datatype: 'application/json',
                contentType: "application/json; charset=utf-8",
                data: '{stateID: "' + stateID + '"}',

                success: function (result) {
                    $("#cityID").html("");
                    $.each(result, function (i, state) {
                        $("#cityID").append('<option value="' + state.Value + '">' + state.Text + '</option>');
                    });
                }
            });
        }
</script>
@Scripts.Render("~/bundles/jquery")
@Scripts.Render("~/bundles/jqueryval")
